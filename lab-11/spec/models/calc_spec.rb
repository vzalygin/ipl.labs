# frozen_string_literal: true

require 'rails_helper'
require 'faker'

RSpec.describe Calc, type: :model do
  let!(:four) { Calc.create input_number: 4, binary_input_number: '100', output_number: 1, binary_output_number: '001' }

  let(:input_number) { Faker::Number.number(digits: 1) }

  it 'should not create calc with duplicated input_number' do
    expect(Calc.create(input_number: 4, binary_input_number: '100', output_number: 1,
                       binary_output_number: '001').valid?).to be(false)
  end

  describe 'add_number_bd' do
    it 'should create calc when input_number = 6' do
      calc = Calc.add_number_bd 6
      expect(calc.input_number).to eq(6)
      expect(calc.binary_input_number).to eq('110')
      expect(calc.output_number).to eq(3)
      expect(calc.binary_output_number).to eq('011')
    end

    it 'should create calc with autogenerated input_number' do
      calc = Calc.add_number_bd input_number
      expect(calc.input_number).to eq(input_number)
      expect(calc.binary_input_number).not_to be_empty
      expect(calc.output_number).to be_kind_of Numeric
      expect(calc.binary_output_number).not_to be_empty
    end
  end

  describe 'find element' do
    it 'should return nil if calc not found' do
      output_number = Faker::Number.within(range: 2..10)
      expect(Calc.find_by(output_number: output_number)).to be_nil
    end

    it 'should return calc' do
      output_number = 1
      expect(Calc.find_by(output_number: output_number).input_number).to eq(4)
    end
  end
end
